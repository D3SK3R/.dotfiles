#!/bin/sh

# Panic script
# it works as toggle:
# execute the first time to panic and the second to go back to normal

# Executing it the first time will chec if this is actually the first part of the toggle
# then its gonna create an file to show, the next time, that the the script is activated

# When first executed, it created a file in /tmp/panic, writes all the ids from all the floating shown windows while also adding them to the file
# pauses all music sources and notifications
# move to the workspace 9 (and also 4 if the second monitor is detected), and opens 3 terminals with different programs with the name 'panic'
#
# executing it again, it will read the file, unpause the music if it was playing, kill all 'panic' windows created, move back the the exact workspaces that were opened and focused, unhide all floating windows, resume notifications and delete the file

file=/tmp/panic

if [ -z $(ls /tmp/ | grep panic) ]; then
    touch $file

    # workspace I'm currently focusing
    focused=$(bspc query -D -d focused --names)
    # Get the workspaces i'm in, write it to the file and
    # sees if theres another monitor, if so, move it to another workspace
    # and writes to the file
    
    monitor1=$(xrandr | \grep -w connected | awk 'FNR==1 {print $1}')
    monitor2=$(xrandr | \grep -w connected | awk 'FNR==2 {print $1}')

    # if xrandr | grep -ow "HDMI-0 connected" >/dev/null; then
    if [[ "$(xrandr | grep -ow "connected" | wc -l)" -gt 1 ]]; then
      # easier command to get the desktop number:
      # bspc query -d focused -D --names
        ws1=$(bspc query -m $monitor1 -T | jq | grep "focusedDesktopId" | \
            awk -F " " '{print $NF}' | cut -d',' -f1)
        ws2=$(bspc query -m $monitor2 -T | gron | grep "focusedDesktopId" | \
            awk -F " " '{print $NF}' | cut -d';' -f1)
        bspc desktop -f 4
        bspc desktop -f 9
    else
        ws1=$(bspc query -m $monitor1 -T | jq | grep "focusedDesktopId" | \
        awk -F " " '{print $NF}' | cut -d',' -f1)
        bspc desktop -f 9
    fi
    
    # writing the actual workspace AFTER the possible second monitor is already
    # in the file, so that the script moves me to the right workspace in the second
    # monitor and only then, moves me to the right workspace in the main monitor
    echo "workspace2 $ws2" >> $file
    echo "workspace1 $ws1" >> $file
    echo "focused $focused" >> $file

    # hides all shown floating windows
    # and writes their ID into the file
    for i in $(bspc query -N -n .floating.\!hidden); do
        bspc node $i -g hidden=on
        echo "hidden $i" >> $file
    done

    # pauses the media if playing
    if [[ $(playerctl status) = "Playing" ]]; then
        echo 'playerctl playing' >> $file
        playerctl play-pause
    fi
    if [[ $(mpc -p 6600 | grep playing) ]]; then
        echo 'mpd playing' >> $file
        mpc -p 6600 pause
    fi

    # stops and closes all possible notifications
    dunstctl set-paused true

    # opens 3 terminals
    # urxvt -name 'panic' -e gotop -aps &
    st -n 'panic' -e gotop -aps --nvidia &
    sleep 0.2
    # urxvt -name 'panic' -e ranger &
    st -n 'panic' -e ranger &
    sleep 0.2
    # urxvt -name 'panic' &
    st -n 'panic' &
    #sleep 0.8
else
    # closes the terminals that the panic button opened
    xdo close -n 'panic'

    # read all the lines from the file
    while read line; do
        # reads the file to know whether it's paused the media, if so, resumes it
        if [ "$line" = 'playerctl playing' ]; then
            playerctl play
        fi
        if [ "$line" = 'mpd playing' ]; then
            mpc -p 6600 play
        fi
        # reads the file to know what workspaces I was in and goes to it
        if [ $(echo $line | cut -d' ' -f1) = 'workspace2' ]; then
            bspc desktop -f $(echo $line | cut -d' ' -f2)
        fi
        if [ $(echo $line | cut -d' ' -f1) = 'workspace1' ]; then
            bspc desktop -f $(echo $line | cut -d' ' -f2)
        fi
        # last, focus the exact workspace I was focusing before panic
        if [ $(echo $line | cut -d' ' -f1) = 'focused' ]; then
            bspc desktop -f $(echo $line | cut -d' ' -f2)
        fi
        # reads the file to know what floating windows were hidden by panic
        if [ $(echo $line | cut -d' ' -f1) = 'hidden' ]; then
            bspc node $(echo $line | cut -d' ' -f2) -g hidden=off
        fi
    done < $file

    # re-enable notifications
    dunstctl close-all
    dunstctl set-paused false

    rm $file
fi


